"""
{{ title }} API Client

{{ description }}

Generated by Damascus SDK Generator
"""

from urllib.parse import urljoin
import requests
from functools import wraps
{% if use_modern_py %}
from typing import Dict, List, Any, Optional, Callable, TypeVar, cast, Union
{% else %}
from typing import Dict, List, Any, Optional, Callable, TypeVar, cast, Union
{% endif %}
{% if has_models %}
from . import models
{% endif %}

{% if security_schemes %}
# Security scheme definitions
{% for scheme_name, scheme in security_schemes.items() %}
class {{ scheme_name }}:
    """{{ scheme.description or "Security scheme" }}"""
    {% if scheme.type == "apiKey" %}
    type = "apiKey"
    name = "{{ scheme.name }}"
    in_location = "{{ scheme.in }}"
    {% elif scheme.type == "http" %}
    type = "http"
    scheme = "{{ scheme.scheme }}"
    {% endif %}
{% endfor %}
{% endif %}

# Return type for methods that return a response
T = TypeVar('T')

class Client:
    """Client for interacting with the {{ title }} API."""

    def __init__(
        self,
        base_url: Optional[str] = None,
        {% if security_schemes %}
        {% for scheme_name, scheme in security_schemes.items() %}
        {% if scheme.type == "apiKey" %}
        {{ to_snake_case(scheme_name) }}: Optional[str] = None,
        {% elif scheme.type == "http" and scheme.scheme == "bearer" %}
        {{ to_snake_case(scheme_name) }}: Optional[str] = None,
        {% endif %}
        {% endfor %}
        {% endif %}
        timeout: float = 10.0,
        verify_ssl: bool = True
    ):
        """
        Initialize the client.

        Args:
            base_url: The base URL for the API.
            {% if security_schemes %}
            {% for scheme_name, scheme in security_schemes.items() %}
            {% if scheme.type == "apiKey" %}
            {{ to_snake_case(scheme_name) }}: API key for authentication.
            {% elif scheme.type == "http" and scheme.scheme == "bearer" %}
            {{ to_snake_case(scheme_name) }}: Bearer token for authentication.
            {% endif %}
            {% endfor %}
            {% endif %}
            timeout: Request timeout in seconds.
            verify_ssl: Whether to verify SSL certificates.
        """
        self.base_url = base_url or "{{ base_url }}"
        {% if security_schemes %}
        {% for scheme_name, scheme in security_schemes.items() %}
        {% if scheme.type == "apiKey" %}
        self.{{ to_snake_case(scheme_name) }} = {{ to_snake_case(scheme_name) }}
        {% elif scheme.type == "http" and scheme.scheme == "bearer" %}
        self.{{ to_snake_case(scheme_name) }} = {{ to_snake_case(scheme_name) }}
        {% endif %}
        {% endfor %}
        {% endif %}
        self.timeout = timeout
        self.verify_ssl = verify_ssl
        self.session = requests.Session()

    def close(self) -> None:
        """Close the session."""
        self.session.close()

    def __enter__(self):
        """Support for context manager usage."""
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """Close the session when exiting the context."""
        self.close()

    def _prepare_request_kwargs(self, **kwargs) -> Dict[str, Any]:
        """
        Prepare request kwargs with authentication and other settings.
        
        Returns:
            A dictionary of keyword arguments for requests.
        """
        prepared_kwargs = {
            "timeout": self.timeout,
            "verify": self.verify_ssl,
        }
        
        # Add authentication
        {% if security_schemes %}
        headers = kwargs.get("headers", {})
        
        {% for scheme_name, scheme in security_schemes.items() %}
        {% if scheme.type == "apiKey" and scheme.in == "header" %}
        if self.{{ to_snake_case(scheme_name) }}:
            headers["{{ scheme.name }}"] = self.{{ to_snake_case(scheme_name) }}
        {% elif scheme.type == "http" and scheme.scheme == "bearer" %}
        if self.{{ to_snake_case(scheme_name) }}:
            headers["Authorization"] = f"Bearer {self.{{ to_snake_case(scheme_name) }}}"
        {% endif %}
        {% endfor %}
        
        if headers:
            prepared_kwargs["headers"] = headers
        {% endif %}
        
        # Add query parameters
        if "params" in kwargs:
            prepared_kwargs["params"] = kwargs["params"]
            
        # Add request body
        if "json" in kwargs:
            prepared_kwargs["json"] = kwargs["json"]
            
        return prepared_kwargs

    def _handle_response(self, response: requests.Response) -> Any:
        """
        Handle the response from the API.
        
        Args:
            response: The response object.
            
        Returns:
            The response data.
            
        Raises:
            requests.HTTPError: If the response contains an error status code.
        """
        response.raise_for_status()
        
        if response.status_code == 204:  # No content
            return None
            
        if "application/json" in response.headers.get("Content-Type", ""):
            return response.json()
            
        return response

{% for path, path_item in paths.items() %}
{% for method, operation in path_item.items() %}
{% if method in ["get", "post", "put", "delete", "patch"] and operation.operation_id %}
    def {{ to_snake_case(operation.operation_id) }}(
        self,
        # Path parameters - Use pre-calculated type
        {% for param in operation.parameters if param.in == "path" %}
        {{ param.snake_name }}: {{ param.type }},
        {% endfor %}
        # Query parameters - Use pre-calculated type
        {% for param in operation.parameters if param.in == "query" %}
        {{ param.snake_name }}: Optional[{{ param.type }}] = None,
        {% endfor %}
        # Request Body parameters - Use pre-calculated list and type
        {% for param in operation.request_body_params %}
        {{ param.snake_name }}: Optional[{{ param.type }}] = None,
        {% endfor %}
        **kwargs: Any # Allow passing extra kwargs like headers
    ) -> {{ operation.response_type }}:
        """
        {{ operation.summary or operation.operation_id }}

        {% if operation.description %}{{ operation.description | wordwrap(70, wrapstring='\n        ') | trim }}{% endif %}

        {% set all_params = operation.parameters + operation.request_body_params %}
        {% if all_params %}
        Args:
            {% for param in operation.parameters %}
            {{ param.snake_name }} ({{ param.type }}): {{ param.description or "No description provided" }}
            {% endfor %}
            {% for param in operation.request_body_params %}
            {{ param.snake_name }} ({{ param.type }}): Request body parameter.
            {% endfor %}
            kwargs: Additional keyword arguments to pass to the request. E.g., headers.
        {% endif %}

        Returns:
            {{ operation.response_type }}: The API response. {# Use pre-calculated response type #}
        """
        # Construct URL, replacing path parameters
        url_path = "{{ path }}"
        {% for param in operation.parameters if param.in == "path" %}
        url_path = url_path.replace("{ {{- param.original_name -}} }", str({{ param.snake_name }}))
        {% endfor %}
        url = urljoin(self.base_url, url_path)

        # Prepare query parameters
        query_params: Dict[str, Any] = {}
        {% for param in operation.parameters if param.in == "query" %}
        if {{ param.snake_name }} is not None:
            query_params["{{ param.original_name }}"] = {{ param.snake_name }}
        {% endfor %}

        # Prepare request body
        json_body: Optional[Dict[str, Any]] = None
        {% if operation.request_body_params %}
        json_body = {}
        {% for param in operation.request_body_params %}
        if {{ param.snake_name }} is not None:
            # Use the original parameter name for the JSON key
            json_key = "{{ param.original_name }}"
            json_body[json_key] = {{ param.snake_name }}
        {% endfor %}
        # Ensure json_body is not empty if all optional fields are None
        if not json_body:
             json_body = None
        {% endif %}

        # Prepare request kwargs, merging with user-provided kwargs
        request_kwargs = self._prepare_request_kwargs(
            params=query_params if query_params else None,
            json=json_body,
            **kwargs # Pass user-provided kwargs here
        )
        
        # Make request
        response = self.session.request("{{ method }}", url, **request_kwargs)
        
        # Handle response and potential model conversion
        result = self._handle_response(response)

        {% if has_response_models and operation.response_model %}
        # Convert dict to model object if a model name is specified and result is a dict
        if isinstance(result, dict):
            try:
                model_class = getattr(models, "{{ operation.response_model }}")
                return cast({{ operation.response_type }}, model_class(**result))
            except (AttributeError, TypeError) as e:
                # Log error or handle cases where conversion fails
                print(f"Warning: Failed to convert response to model {{ operation.response_model }}: {e}")
                return cast({{ operation.response_type }}, result) # Return dict if conversion fails
        elif isinstance(result, list) and "{{ operation.response_model }}" in "{{ operation.response_type }}":
             # Handle list of models if response_type indicates List[ModelName]
             try:
                 model_class = getattr(models, "{{ operation.response_model }}")
                 return cast({{ operation.response_type }}, [model_class(**item) for item in result if isinstance(item, dict)])
             except (AttributeError, TypeError) as e:
                 print(f"Warning: Failed to convert list items to model {{ operation.response_model }}: {e}")
                 return cast({{ operation.response_type }}, result) # Return list if conversion fails
        {% endif %}

        return cast({{ operation.response_type }}, result)

{% endif %}
{% endfor %}
{% endfor %}