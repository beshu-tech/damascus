"""
{{ title }} API Client

{{ description }}

Generated by Damascus SDK Generator
"""

from urllib.parse import urljoin
import requests
from functools import wraps
{% if use_modern_py %}
from typing import Dict, List, Any, Optional, Callable, TypeVar, cast, Union
{% else %}
from typing import Dict, List, Any, Optional, Callable, TypeVar, cast, Union
{% endif %}
{% if has_models %}
from . import models
{% endif %}

{% if security_schemes %}
# Security scheme definitions
{% for scheme_name, scheme in security_schemes.items() %}
class {{ scheme_name }}:
    """{{ scheme.description or "Security scheme" }}"""
    {% if scheme.type == "apiKey" %}
    type = "apiKey"
    name = "{{ scheme.name }}"
    in_location = "{{ scheme.in }}"
    {% elif scheme.type == "http" %}
    type = "http"
    scheme = "{{ scheme.scheme }}"
    {% endif %}
{% endfor %}
{% endif %}

# Return type for methods that return a response
T = TypeVar('T')

class Client:
    """Client for interacting with the {{ title }} API."""

    def __init__(
        self,
        base_url: Optional[str] = None,
        {% if security_schemes %}
        {% for scheme_name, scheme in security_schemes.items() %}
        {% if scheme.type == "apiKey" %}
        {{ to_snake_case(scheme_name) }}: Optional[str] = None,
        {% elif scheme.type == "http" and scheme.scheme == "bearer" %}
        {{ to_snake_case(scheme_name) }}: Optional[str] = None,
        {% endif %}
        {% endfor %}
        {% endif %}
        timeout: float = 10.0,
        verify_ssl: bool = True
    ):
        """
        Initialize the client.

        Args:
            base_url: The base URL for the API.
            {% if security_schemes %}
            {% for scheme_name, scheme in security_schemes.items() %}
            {% if scheme.type == "apiKey" %}
            {{ to_snake_case(scheme_name) }}: API key for authentication.
            {% elif scheme.type == "http" and scheme.scheme == "bearer" %}
            {{ to_snake_case(scheme_name) }}: Bearer token for authentication.
            {% endif %}
            {% endfor %}
            {% endif %}
            timeout: Request timeout in seconds.
            verify_ssl: Whether to verify SSL certificates.
        """
        self.base_url = base_url or "{{ base_url }}"
        {% if security_schemes %}
        {% for scheme_name, scheme in security_schemes.items() %}
        {% if scheme.type == "apiKey" %}
        self.{{ to_snake_case(scheme_name) }} = {{ to_snake_case(scheme_name) }}
        {% elif scheme.type == "http" and scheme.scheme == "bearer" %}
        self.{{ to_snake_case(scheme_name) }} = {{ to_snake_case(scheme_name) }}
        {% endif %}
        {% endfor %}
        {% endif %}
        self.timeout = timeout
        self.verify_ssl = verify_ssl
        self.session = requests.Session()

    def close(self) -> None:
        """Close the session."""
        self.session.close()

    def __enter__(self):
        """Support for context manager usage."""
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """Close the session when exiting the context."""
        self.close()

    def _prepare_request_kwargs(self, **kwargs) -> Dict[str, Any]:
        """
        Prepare request kwargs with authentication and other settings.
        
        Returns:
            A dictionary of keyword arguments for requests.
        """
        prepared_kwargs = {
            "timeout": self.timeout,
            "verify": self.verify_ssl,
        }
        
        # Add authentication
        {% if security_schemes %}
        headers = kwargs.get("headers", {})
        
        {% for scheme_name, scheme in security_schemes.items() %}
        {% if scheme.type == "apiKey" and scheme.in == "header" %}
        if self.{{ to_snake_case(scheme_name) }}:
            headers["{{ scheme.name }}"] = self.{{ to_snake_case(scheme_name) }}
        {% elif scheme.type == "http" and scheme.scheme == "bearer" %}
        if self.{{ to_snake_case(scheme_name) }}:
            headers["Authorization"] = f"Bearer {self.{{ to_snake_case(scheme_name) }}}"
        {% endif %}
        {% endfor %}
        
        if headers:
            prepared_kwargs["headers"] = headers
        {% endif %}
        
        # Add query parameters
        if "params" in kwargs:
            prepared_kwargs["params"] = kwargs["params"]
            
        # Add request body
        if "json" in kwargs:
            prepared_kwargs["json"] = kwargs["json"]
            
        return prepared_kwargs

    def _handle_response(self, response: requests.Response) -> Any:
        """
        Handle the response from the API.
        
        Args:
            response: The response object.
            
        Returns:
            The response data.
            
        Raises:
            requests.HTTPError: If the response contains an error status code.
        """
        response.raise_for_status()
        
        if response.status_code == 204:  # No content
            return None
            
        if "application/json" in response.headers.get("Content-Type", ""):
            return response.json()
            
        return response

{% for path, path_item in paths.items() %}
{% for method, operation in path_item.items() %}
{% if method in ["get", "post", "put", "delete", "patch"] and operation.operationId %}
    def {{ to_snake_case(operation.operationId) }}(
        self,
        {% for param in operation.parameters if param.in == "path" %}
        {{ to_snake_case(param.name) }}: {{ get_type_from_schema(param.schema) }},
        {% endfor %}
        {% for param in operation.parameters if param.in == "query" %}
        {{ to_snake_case(param.name) }}: {{ get_type_from_schema(param.schema) }}{% if not param.required %} = None{% endif %},
        {% endfor %}
        {% for param in get_request_body_params(operation.requestBody) %}
        {{ param.name }}: {{ param.type }}{% if not param.required %} = None{% endif %},
        {% endfor %}
    ) -> {{ get_response_type(operation.responses) }}:
        """
        {{ operation.summary or operation.operationId }}

        {% if operation.description %}{{ operation.description }}{% endif %}

        {% if operation.parameters %}
        Args:
            {% for param in operation.parameters %}
            {{ to_snake_case(param.name) }}: {{ param.description or "No description provided" }}
            {% endfor %}
            {% for param in get_request_body_params(operation.requestBody) %}
            {{ param.name }}: {{ param.description or "No description provided" }}
            {% endfor %}
        {% endif %}

        Returns:
            {{ get_response_type(operation.responses) }}
        """
        url = urljoin(self.base_url, f"{{ path }}"{% for param in operation.parameters if param.in == "path" %}.replace("{%raw%}{{%endraw%} {{ param.name }} {%raw%}}{%endraw%}", str({{ to_snake_case(param.name) }})){% endfor %})
        
        kwargs = self._prepare_request_kwargs(
            {% if operation.parameters %}
            {% set has_query_params = false %}
            {% for param in operation.parameters if param.in == "query" %}
            {% set has_query_params = true %}
            {% endfor %}
            {% if has_query_params %}
            params={
                {% for param in operation.parameters if param.in == "query" %}
                "{{ param.name }}": {{ to_snake_case(param.name) }},
                {% endfor %}
            },
            {% endif %}
            {% endif %}
            {% if operation.requestBody %}
            json={
                {% for param in get_request_body_params(operation.requestBody) %}
                "{{ param.name.replace('_', '') }}": {{ param.name }},
                {% endfor %}
            },
            {% endif %}
        )
        
        response = self.session.{{ method }}(url, **kwargs)
        result = self._handle_response(response)
        
        # Check if we need to convert to a model
        {% if has_models %}
        {% set response_model = None %}
        {% if operation.responses and "200" in operation.responses and operation.responses["200"].content 
              and "application/json" in operation.responses["200"].content 
              and operation.responses["200"].content["application/json"].schema 
              and "$ref" in operation.responses["200"].content["application/json"].schema %}
        {% set schema_ref = operation.responses["200"].content["application/json"].schema["$ref"] %}
        {% set schema_name = schema_ref.split("/")[-1] %}
        {% set response_type = get_response_type(operation.responses) %}
        {% if "models." in response_type %}
        # Convert dictionary to model object
        return {{ response_type }}(**result) if result else None
        {% endif %}
        {% endif %}
        {% endif %}
        
        return result

{% endif %}
{% endfor %}
{% endfor %}